{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xE6408f4F5181Dc40C32c960435c70F88568CC3FE",
    "txHash": "0x68360a79d614858f95695130067c020e2b5d91c327accc969627e99a9912f921",
    "deployTransaction": {
      "hash": "0x68360a79d614858f95695130067c020e2b5d91c327accc969627e99a9912f921",
      "type": 2,
      "accessList": [],
      "blockHash": null,
      "blockNumber": null,
      "transactionIndex": null,
      "confirmations": 0,
      "from": "0x53A25D9223Ef4DeDA656746B6F8eb09fE81806b7",
      "gasPrice": {
        "type": "BigNumber",
        "hex": "0x10cc4e6fe9"
      },
      "maxPriorityFeePerGas": {
        "type": "BigNumber",
        "hex": "0x10cc4e6fe1"
      },
      "maxFeePerGas": {
        "type": "BigNumber",
        "hex": "0x10cc4e6fe9"
      },
      "gasLimit": {
        "type": "BigNumber",
        "hex": "0x0762b4"
      },
      "to": null,
      "value": {
        "type": "BigNumber",
        "hex": "0x00"
      },
      "nonce": 9,
      "data": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610759806100616000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead146101645761007b565b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610515565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee366004610554565b610292565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f36600461058c565b61031c565b34801561013057600080fd5b506100d161013f366004610554565b6103ad565b34801561015057600080fd5b506100d161015f366004610515565b610405565b34801561017057600080fd5b506100a061017f366004610515565b6104ef565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d9190610538565b949350505050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f906106c0565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146102bc5760405162461bcd60e51b815260040161023f906106c0565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103465760405162461bcd60e51b815260040161023f906106c0565b60405163278f794360e11b81526001600160a01b03841690634f1ef286903490610376908690869060040161065d565b6000604051808303818588803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146103d75760405162461bcd60e51b815260040161023f906106c0565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe6906024016102e6565b6000546001600160a01b0316331461042f5760405162461bcd60e51b815260040161023f906106c0565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b600060208284031215610526578081fd5b81356105318161070b565b9392505050565b600060208284031215610549578081fd5b81516105318161070b565b60008060408385031215610566578081fd5b82356105718161070b565b915060208301356105818161070b565b809150509250929050565b6000806000606084860312156105a0578081fd5b83356105ab8161070b565b925060208401356105bb8161070b565b9150604084013567ffffffffffffffff808211156105d7578283fd5b818601915086601f8301126105ea578283fd5b8135818111156105fc576105fc6106f5565b604051601f8201601f19908116603f01168101908382118183101715610624576106246106f5565b8160405282815289602084870101111561063c578586fd5b82602086016020830137856020848301015280955050505050509250925092565b600060018060a01b038416825260206040818401528351806040850152825b818110156106985785810183015185820160600152820161067c565b818111156106a95783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461072057600080fd5b5056fea2646970667358221220d849f96f3086b9f82cdcf665adb8c697ace05638da1c7c16ab2d26293717af6764736f6c63430008020033",
      "r": "0x4592979a2b0c1cfeee094fdd92b011371566a32f362c157ccb1eb9e41418178c",
      "s": "0x7401e3fd42dd0853b22c8096e66d19c5ba905fd98f128a610e99926c8d484855",
      "v": 0,
      "creates": "0xE6408f4F5181Dc40C32c960435c70F88568CC3FE",
      "chainId": 80001
    }
  },
  "proxies": [
    {
      "address": "0xDF10a7761A5cF84C1894714982b2143efA7744cA",
      "txHash": "0x2b6d1cf523a38436754e562e6d9b08ab836f32e2b4278714002964d2cbac2e0d",
      "kind": "transparent"
    },
    {
      "address": "0x0B80ee90e57AaccACb7E59E2D0696De4992F1919",
      "txHash": "0x3cb4a97b1123fbe2a374edfc5ba10b4b597b9775a7dbcf8d37c7f45a5251351c",
      "kind": "transparent"
    }
  ],
  "impls": {
    "d6e20895d999fd0c47f38217534cb3fb952c1c814cee08d576fcb7ac3843b7ba": {
      "address": "0x2e1a738830853Ae87b11F813207e9048E1Db5419",
      "txHash": "0xa0522da404c401f1b3ba2f9614ee24ed7af39775e852e2b424005fe50169ec68",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "contracts\\ExchangeStorage.sol:17"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "contracts\\ExchangeStorage.sol:21"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)8213_storage)dyn_storage)",
            "src": "contracts\\ExchangeStorage.sol:23"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts\\ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "contracts\\ExchangeStorage.sol:26"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "contracts\\ExchangeStorage.sol:28"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "contracts\\ExchangeStorage.sol:30"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "contracts\\ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "contracts\\ExchangeStorage.sol:33"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)1569",
            "src": "contracts\\ExchangeStorage.sol:36"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "contracts\\ExchangeStorage.sol:38"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "contracts\\ExchangeStorage.sol:40"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts\\utils\\Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts\\utils\\Initializable.sol:31"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts\\utils\\Initializable.sol:66"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts\\utils\\Context.sol:41"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts\\utils\\Ownable.sol:22"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts\\utils\\Ownable.sol:82"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)4399_storage)",
            "src": "contracts\\OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "contracts\\ExchangeWithOrionPool.sol:16"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts\\ExchangeWithOrionPool.sol:17"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "WETH",
            "type": "t_address",
            "src": "contracts\\ExchangeWithOrionPool.sol:19"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "atomicSwaps",
            "type": "t_mapping(t_bytes32,t_struct(LockInfo)5213_storage)",
            "src": "contracts\\ExchangeWithAtomic.sol:10"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "secrets",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts\\ExchangeWithAtomic.sol:11"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(LockInfo)5213_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.LockInfo)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(LockInfo)5213_storage": {
            "label": "struct LibAtomic.LockInfo",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "expiration",
                "type": "t_uint64"
              },
              {
                "label": "used",
                "type": "t_bool"
              },
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "targetChainId",
                "type": "t_uint24"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(Stake)4399_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)4399_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)4392"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_enum(StakePhase)4392": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)8213_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)8213_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)8213_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)1569": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "58d1315d5ec809657708c06c9ef5ff4d08d10c264659738a6dd4b524fb371f7a": {
      "address": "0xd7B43d33A8F2a803F748566a287050850Cb1c42D",
      "txHash": "0x4f6c5523fbd75a388d02332a0d40ba4d3a026da34404894b3ddb517cb0d9827c",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "contracts\\ExchangeStorage.sol:17"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "contracts\\ExchangeStorage.sol:21"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)8213_storage)dyn_storage)",
            "src": "contracts\\ExchangeStorage.sol:23"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts\\ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "contracts\\ExchangeStorage.sol:26"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "contracts\\ExchangeStorage.sol:28"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "contracts\\ExchangeStorage.sol:30"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "contracts\\ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "contracts\\ExchangeStorage.sol:33"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)1569",
            "src": "contracts\\ExchangeStorage.sol:36"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "contracts\\ExchangeStorage.sol:38"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "contracts\\ExchangeStorage.sol:40"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts\\utils\\Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts\\utils\\Initializable.sol:31"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts\\utils\\Initializable.sol:66"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts\\utils\\Context.sol:41"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts\\utils\\Ownable.sol:22"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts\\utils\\Ownable.sol:82"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)4399_storage)",
            "src": "contracts\\OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "contracts\\ExchangeWithOrionPool.sol:16"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts\\ExchangeWithOrionPool.sol:17"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "WETH",
            "type": "t_address",
            "src": "contracts\\ExchangeWithOrionPool.sol:19"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "atomicSwaps",
            "type": "t_mapping(t_bytes32,t_struct(LockInfo)5213_storage)",
            "src": "contracts\\ExchangeWithAtomic.sol:10"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "secrets",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts\\ExchangeWithAtomic.sol:11"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(LockInfo)5213_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.LockInfo)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(LockInfo)5213_storage": {
            "label": "struct LibAtomic.LockInfo",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "expiration",
                "type": "t_uint64"
              },
              {
                "label": "used",
                "type": "t_bool"
              },
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "targetChainId",
                "type": "t_uint24"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(Stake)4399_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)4399_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)4392"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_enum(StakePhase)4392": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)8213_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)8213_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)8213_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)1569": {
            "label": "contract IERC20"
          }
        }
      }
    }
  }
}
