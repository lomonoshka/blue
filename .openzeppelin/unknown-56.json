{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x22F485d0E314E9e38b16da4f2992aD4cbf7585bE",
    "txHash": "0x6b645ca05d7eaca874dfeba8799296c5927d14bcef16523d72bc8f0e989c804d"
  },
  "proxies": [],
  "impls": {
    "5fb6bc93af5630db827f1aa7f44fbc3e8a4b2e4ff222ae74cfa3352071d213fc": {
      "address": "0x66bb26F27418093Db9643C55E828Fde3AeA4be5e",
      "txHash": "0x65dd20d675c3c57c42a9976eb6d15b0b02e0c5bb0645b522b10d4dd4452a1faf",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "ExchangeStorage.sol:16"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "ExchangeStorage.sol:20"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)5264_storage)dyn_storage)",
            "src": "ExchangeStorage.sol:22"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "ExchangeStorage.sol:24"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "ExchangeStorage.sol:27"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "ExchangeStorage.sol:29"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "ExchangeStorage.sol:31"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)17522",
            "src": "ExchangeStorage.sol:35"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "ExchangeStorage.sol:37"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "ExchangeStorage.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "utils/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "utils/Initializable.sol:31"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "utils/Initializable.sol:66"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "utils/Context.sol:41"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "utils/Ownable.sol:22"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "utils/Ownable.sol:82"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)3541_storage)",
            "src": "OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "ExchangeWithOrionPool.sol:14"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "ExchangeWithOrionPool.sol:15"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(Stake)3541_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)3541_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)3534"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_enum(StakePhase)3534": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)5264_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)5264_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)5264_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)17522": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "2da270b28451c19e9ee7db80828d2be20806aa7b5468e2b931c11e687b2857de": {
      "address": "0xA41944d96ffd0016431A862Cf797776c001B8Bb6",
      "txHash": "0x9faec6e0c15d45f6ed60409e6653d80d87630762598671bb1edca615006c49e8",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "contracts/ExchangeStorage.sol:17"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "contracts/ExchangeStorage.sol:21"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)5835_storage)dyn_storage)",
            "src": "contracts/ExchangeStorage.sol:23"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "contracts/ExchangeStorage.sol:26"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:28"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:30"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:33"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)1051",
            "src": "contracts/ExchangeStorage.sol:36"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:38"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:40"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:31"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Initializable.sol:66"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Context.sol:41"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/utils/Ownable.sol:22"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/utils/Ownable.sol:82"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)2981_storage)",
            "src": "contracts/OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:17"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/ExchangeWithOrionPool.sol:18"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "WETH",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:20"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "atomicSwaps",
            "type": "t_mapping(t_bytes32,t_struct(LockOrder)3191_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:11"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "secrets",
            "type": "t_mapping(t_bytes32,t_struct(RedeemInfo)3218_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:12"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(LockOrder)3191_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.LockOrder)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(LockOrder)3191_storage": {
            "label": "struct LibAtomic.LockOrder",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "expiration",
                "type": "t_uint64"
              },
              {
                "label": "secretHash",
                "type": "t_bytes32"
              },
              {
                "label": "used",
                "type": "t_bool"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RedeemInfo)3218_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.RedeemInfo)"
          },
          "t_struct(RedeemInfo)3218_storage": {
            "label": "struct LibAtomic.RedeemInfo",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "secret",
                "type": "t_bytes_storage"
              }
            ]
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(Stake)2981_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)2981_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)2974"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_enum(StakePhase)2974": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)5835_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)5835_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)5835_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)1051": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "5374c5a96b856c854ca0fce3e0bb026c2534bab9679fdaded5eef9853e2b5cdc": {
      "address": "0x2Ef79f83B3021a1ddaa386EB6aaE62113b5c5F96",
      "txHash": "0x8b1a029839ffcda9bcb87008938889c788dc0937908bec769c1d6587b45eaec2",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "contracts/ExchangeStorage.sol:17"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "contracts/ExchangeStorage.sol:21"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)7397_storage)dyn_storage)",
            "src": "contracts/ExchangeStorage.sol:23"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "contracts/ExchangeStorage.sol:26"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:28"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:30"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:33"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)1569",
            "src": "contracts/ExchangeStorage.sol:36"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:38"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:40"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:31"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Initializable.sol:66"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Context.sol:41"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/utils/Ownable.sol:22"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/utils/Ownable.sol:82"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)3991_storage)",
            "src": "contracts/OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:17"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/ExchangeWithOrionPool.sol:18"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "WETH",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:20"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "atomicSwaps",
            "type": "t_mapping(t_bytes32,t_struct(LockOrder)4753_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:11"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "secrets",
            "type": "t_mapping(t_bytes32,t_struct(RedeemInfo)4780_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:12"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(LockOrder)4753_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.LockOrder)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(LockOrder)4753_storage": {
            "label": "struct LibAtomic.LockOrder",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "expiration",
                "type": "t_uint64"
              },
              {
                "label": "secretHash",
                "type": "t_bytes32"
              },
              {
                "label": "used",
                "type": "t_bool"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RedeemInfo)4780_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.RedeemInfo)"
          },
          "t_struct(RedeemInfo)4780_storage": {
            "label": "struct LibAtomic.RedeemInfo",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "secret",
                "type": "t_bytes_storage"
              }
            ]
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(Stake)3991_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)3991_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)3984"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_enum(StakePhase)3984": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)7397_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)7397_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)7397_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)1569": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "9b29c12d1acb3d0c3790ea43286d96ea2ccbe9166476351ada4f4ed3b361bb62": {
      "address": "0x01E2287bb3e758F7b53e21bC6897C2886a185294",
      "txHash": "0xbef661a28ace142eacac192a85161ac8e2523d2f04b31e4aeb175464fb7c9abb",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "contracts/ExchangeStorage.sol:17"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "contracts/ExchangeStorage.sol:21"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)7397_storage)dyn_storage)",
            "src": "contracts/ExchangeStorage.sol:23"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "contracts/ExchangeStorage.sol:26"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:28"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:30"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:33"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)1569",
            "src": "contracts/ExchangeStorage.sol:36"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:38"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:40"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:31"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Initializable.sol:66"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Context.sol:41"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/utils/Ownable.sol:22"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/utils/Ownable.sol:82"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)3991_storage)",
            "src": "contracts/OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:17"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/ExchangeWithOrionPool.sol:18"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "WETH",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:20"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "atomicSwaps",
            "type": "t_mapping(t_bytes32,t_struct(LockOrder)4753_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:11"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "secrets",
            "type": "t_mapping(t_bytes32,t_struct(RedeemInfo)4780_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:12"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(LockOrder)4753_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.LockOrder)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(LockOrder)4753_storage": {
            "label": "struct LibAtomic.LockOrder",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "expiration",
                "type": "t_uint64"
              },
              {
                "label": "secretHash",
                "type": "t_bytes32"
              },
              {
                "label": "used",
                "type": "t_bool"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RedeemInfo)4780_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.RedeemInfo)"
          },
          "t_struct(RedeemInfo)4780_storage": {
            "label": "struct LibAtomic.RedeemInfo",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "secret",
                "type": "t_bytes_storage"
              }
            ]
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(Stake)3991_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)3991_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)3984"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_enum(StakePhase)3984": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)7397_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)7397_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)7397_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)1569": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "4a35a36cc4eb9ae88fa1f21eb31f689e21d7a527abb8b734320b7e2448297f94": {
      "address": "0xEF2aeb447E5f10f912eD0E0FB1E5859900e1E60B",
      "txHash": "0x7e3ddcf21e68b2adae377d5d74433efa1b7bc9519b46f9efc0771c75b857645b",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "contracts/ExchangeStorage.sol:17"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "contracts/ExchangeStorage.sol:21"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)5859_storage)dyn_storage)",
            "src": "contracts/ExchangeStorage.sol:23"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "contracts/ExchangeStorage.sol:26"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:28"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:30"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:33"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)1051",
            "src": "contracts/ExchangeStorage.sol:36"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:38"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:40"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:31"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Initializable.sol:66"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Context.sol:41"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/utils/Ownable.sol:22"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/utils/Ownable.sol:82"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)2971_storage)",
            "src": "contracts/OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:17"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/ExchangeWithOrionPool.sol:18"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "WETH",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:20"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "atomicSwaps",
            "type": "t_mapping(t_bytes32,t_struct(LockInfo)3193_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:11"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "secrets",
            "type": "t_mapping(t_bytes32,t_bytes_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:12"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(LockInfo)3193_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.LockInfo)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(LockInfo)3193_storage": {
            "label": "struct LibAtomic.LockInfo",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "expiration",
                "type": "t_uint64"
              },
              {
                "label": "used",
                "type": "t_bool"
              },
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "targetChainId",
                "type": "t_uint24"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_bytes32,t_bytes_storage)": {
            "label": "mapping(bytes32 => bytes)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(Stake)2971_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)2971_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)2964"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_enum(StakePhase)2964": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)5859_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)5859_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)5859_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)1051": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "c79f9b797727ee1e947fdc708b9f7640fb1a7dc2bd5e667df2ed56fac917988f": {
      "address": "0x260ef91487E34791D9155366DfC49F839ddE885c",
      "txHash": "0xbe75bdf59a5620f14af03f88b6d1bf251c507ebfce923d4f7e898c55ee923ed3",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "contracts/ExchangeStorage.sol:17"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "contracts/ExchangeStorage.sol:21"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)7418_storage)dyn_storage)",
            "src": "contracts/ExchangeStorage.sol:23"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "contracts/ExchangeStorage.sol:26"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:28"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:30"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:33"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)1569",
            "src": "contracts/ExchangeStorage.sol:36"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:38"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:40"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:31"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Initializable.sol:66"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Context.sol:41"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/utils/Ownable.sol:22"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/utils/Ownable.sol:82"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)3981_storage)",
            "src": "contracts/OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:17"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/ExchangeWithOrionPool.sol:18"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "WETH",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:20"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "atomicSwaps",
            "type": "t_mapping(t_bytes32,t_struct(LockInfo)4755_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:11"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "secrets",
            "type": "t_mapping(t_bytes32,t_bytes_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:12"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(LockInfo)4755_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.LockInfo)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(LockInfo)4755_storage": {
            "label": "struct LibAtomic.LockInfo",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "expiration",
                "type": "t_uint64"
              },
              {
                "label": "used",
                "type": "t_bool"
              },
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "targetChainId",
                "type": "t_uint24"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_bytes32,t_bytes_storage)": {
            "label": "mapping(bytes32 => bytes)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(Stake)3981_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)3981_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)3974"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_enum(StakePhase)3974": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)7418_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)7418_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)7418_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)1569": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "c9857c5f72fcc9046a27eeb2dcfdab441deecb7576127a7e415acc9d6f08bf91": {
      "address": "0x66f2FD7B5B656F29DCbFf794856B67fF79152Ed7",
      "txHash": "0x358d53c3c6c3ef6ba540004f8da29881cc73af68ed0620b2a1833713fd345200",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "contracts/ExchangeStorage.sol:17"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "contracts/ExchangeStorage.sol:21"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)7440_storage)dyn_storage)",
            "src": "contracts/ExchangeStorage.sol:23"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "contracts/ExchangeStorage.sol:26"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:28"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:30"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:33"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)1569",
            "src": "contracts/ExchangeStorage.sol:36"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:38"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:40"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:31"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Initializable.sol:66"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Context.sol:41"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/utils/Ownable.sol:22"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/utils/Ownable.sol:82"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)3981_storage)",
            "src": "contracts/OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:17"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/ExchangeWithOrionPool.sol:18"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "WETH",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:20"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "atomicSwaps",
            "type": "t_mapping(t_bytes32,t_struct(LockInfo)4755_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:11"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "secrets",
            "type": "t_mapping(t_bytes32,t_bytes_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:12"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(LockInfo)4755_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.LockInfo)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(LockInfo)4755_storage": {
            "label": "struct LibAtomic.LockInfo",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "expiration",
                "type": "t_uint64"
              },
              {
                "label": "used",
                "type": "t_bool"
              },
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "targetChainId",
                "type": "t_uint24"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_bytes32,t_bytes_storage)": {
            "label": "mapping(bytes32 => bytes)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(Stake)3981_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)3981_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)3974"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_enum(StakePhase)3974": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)7440_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)7440_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)7440_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)1569": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "1cde744cfa1fdd989fb3bd18a5bd8bd895766fe0695d35492f073cf2cd68b0c0": {
      "address": "0xBCa183e7Ab6a1bec270Ea94FD05CD307b00c57a7",
      "txHash": "0x860e25b7af1ff0350d4be562a53e9902ffed1f6bfa6d88de17f4eefed2693355",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "contracts/ExchangeStorage.sol:17"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "contracts/ExchangeStorage.sol:21"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)7711_storage)dyn_storage)",
            "src": "contracts/ExchangeStorage.sol:23"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "contracts/ExchangeStorage.sol:26"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:28"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:30"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:33"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)1569",
            "src": "contracts/ExchangeStorage.sol:36"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:38"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:40"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:31"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Initializable.sol:66"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Context.sol:41"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/utils/Ownable.sol:22"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/utils/Ownable.sol:82"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)4049_storage)",
            "src": "contracts/OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:17"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/ExchangeWithOrionPool.sol:18"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "WETH",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:20"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "atomicSwaps",
            "type": "t_mapping(t_bytes32,t_struct(LockInfo)4846_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:11"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "secrets",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/ExchangeWithAtomic.sol:12"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(LockInfo)4846_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.LockInfo)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(LockInfo)4846_storage": {
            "label": "struct LibAtomic.LockInfo",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "expiration",
                "type": "t_uint64"
              },
              {
                "label": "used",
                "type": "t_bool"
              },
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "targetChainId",
                "type": "t_uint24"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(Stake)4049_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)4049_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)4042"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_enum(StakePhase)4042": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)7711_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)7711_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)7711_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)1569": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "3ebe88585b09b4c1c8751466d8157bb11ea29d638c99175ce70884c95838d34f": {
      "address": "0x6f7cB90DB7c34107F9dD59206d75ecE56d980E8f",
      "txHash": "0x57849af030d5dd0210213ebfe0e4c8fd2c085179fa353a0ef7ecfe858ddf037d",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "contracts/ExchangeStorage.sol:17"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "contracts/ExchangeStorage.sol:21"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)8042_storage)dyn_storage)",
            "src": "contracts/ExchangeStorage.sol:23"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "contracts/ExchangeStorage.sol:26"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:28"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:30"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:33"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)1569",
            "src": "contracts/ExchangeStorage.sol:36"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:38"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:40"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:31"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Initializable.sol:66"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Context.sol:41"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/utils/Ownable.sol:22"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/utils/Ownable.sol:82"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)4370_storage)",
            "src": "contracts/OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:17"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/ExchangeWithOrionPool.sol:18"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "WETH",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:20"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "atomicSwaps",
            "type": "t_mapping(t_bytes32,t_struct(LockInfo)5177_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:11"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "secrets",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/ExchangeWithAtomic.sol:12"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(LockInfo)5177_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.LockInfo)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(LockInfo)5177_storage": {
            "label": "struct LibAtomic.LockInfo",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "expiration",
                "type": "t_uint64"
              },
              {
                "label": "used",
                "type": "t_bool"
              },
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "targetChainId",
                "type": "t_uint24"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(Stake)4370_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)4370_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)4363"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_enum(StakePhase)4363": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)8042_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)8042_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)8042_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)1569": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "1494f383a89e4dc6d78d257e8c2eec41658fb32308a75183f485b068a027f2eb": {
      "address": "0x29c7C6C657bAeeDF03256c252149091AAB1cF819",
      "txHash": "0xe3810d6566fca897179cdf2fc0907f9d56fa7c0ecee41e7d1ea0443e6e6b1f2e",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "contracts/ExchangeStorage.sol:17"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "contracts/ExchangeStorage.sol:21"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)8064_storage)dyn_storage)",
            "src": "contracts/ExchangeStorage.sol:23"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "contracts/ExchangeStorage.sol:26"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:28"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:30"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:33"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)1569",
            "src": "contracts/ExchangeStorage.sol:36"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:38"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:40"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:31"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Initializable.sol:66"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Context.sol:41"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/utils/Ownable.sol:22"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/utils/Ownable.sol:82"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)4392_storage)",
            "src": "contracts/OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:17"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/ExchangeWithOrionPool.sol:18"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "WETH",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:20"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "atomicSwaps",
            "type": "t_mapping(t_bytes32,t_struct(LockInfo)5199_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:11"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "secrets",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/ExchangeWithAtomic.sol:12"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(LockInfo)5199_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.LockInfo)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(LockInfo)5199_storage": {
            "label": "struct LibAtomic.LockInfo",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "expiration",
                "type": "t_uint64"
              },
              {
                "label": "used",
                "type": "t_bool"
              },
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "targetChainId",
                "type": "t_uint24"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(Stake)4392_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)4392_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)4385"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_enum(StakePhase)4385": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)8064_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)8064_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)8064_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)1569": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "a045d1dc48446187f33d38dda0beb9ffe879aa8fe2002461e7d57b72a9ad1566": {
      "address": "0xe35EF2cDEaa137e96893D71A51F9bCd431844DAF",
      "txHash": "0x4f2d6b9e182f6140a616576bb6bc56d6f6f044d80d08780ee597b293e606e365",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "contracts/ExchangeStorage.sol:17"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "contracts/ExchangeStorage.sol:21"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)8213_storage)dyn_storage)",
            "src": "contracts/ExchangeStorage.sol:23"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "contracts/ExchangeStorage.sol:26"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:28"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:30"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:33"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)1569",
            "src": "contracts/ExchangeStorage.sol:36"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:38"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:40"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:31"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Initializable.sol:66"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Context.sol:41"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/utils/Ownable.sol:22"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/utils/Ownable.sol:82"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)4399_storage)",
            "src": "contracts/OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:16"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/ExchangeWithOrionPool.sol:17"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "WETH",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:19"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "atomicSwaps",
            "type": "t_mapping(t_bytes32,t_struct(LockInfo)5213_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:10"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "secrets",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/ExchangeWithAtomic.sol:11"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(LockInfo)5213_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.LockInfo)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(LockInfo)5213_storage": {
            "label": "struct LibAtomic.LockInfo",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "expiration",
                "type": "t_uint64"
              },
              {
                "label": "used",
                "type": "t_bool"
              },
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "targetChainId",
                "type": "t_uint24"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(Stake)4399_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)4399_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)4392"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_enum(StakePhase)4392": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)8213_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)8213_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)8213_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)1569": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "47778843e2b0c94c6df3f002bc8ebc9372175ff1dce8286652b479d48ceb6e1d": {
      "address": "0x9A0e986Ed45E5CdFff713DccDf395FaA34a16545",
      "txHash": "0xf2a21a17e76d4860ad397aeed03f44a2c1df843c5a5af12e066710ed7e32b164",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "contracts/ExchangeStorage.sol:17"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "contracts/ExchangeStorage.sol:21"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)8536_storage)dyn_storage)",
            "src": "contracts/ExchangeStorage.sol:23"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "contracts/ExchangeStorage.sol:26"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:28"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:30"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:33"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)1569",
            "src": "contracts/ExchangeStorage.sol:36"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:38"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:40"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:31"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Initializable.sol:66"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Context.sol:41"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/utils/Ownable.sol:22"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/utils/Ownable.sol:82"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)4400_storage)",
            "src": "contracts/OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:16"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/ExchangeWithOrionPool.sol:17"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "WETH",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:19"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "atomicSwaps",
            "type": "t_mapping(t_bytes32,t_struct(LockInfo)5214_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:10"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "secrets",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/ExchangeWithAtomic.sol:11"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(LockInfo)5214_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.LockInfo)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(LockInfo)5214_storage": {
            "label": "struct LibAtomic.LockInfo",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "expiration",
                "type": "t_uint64"
              },
              {
                "label": "used",
                "type": "t_bool"
              },
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "targetChainId",
                "type": "t_uint24"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(Stake)4400_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)4400_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)4393"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_enum(StakePhase)4393": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)8536_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)8536_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)8536_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)1569": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "ae0057af5d73486411010abd46319d1d25571827617c0ec885fff9467881305f": {
      "address": "0x8820fa30b5A80a7258e98Af7D7Ba5555c82D8133",
      "txHash": "0x50c41b1834f48652cc2301d28df83a1420aaf20cb658eb84f3094e7bc59c7c07",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "contracts/ExchangeStorage.sol:17"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "contracts/ExchangeStorage.sol:21"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)8803_storage)dyn_storage)",
            "src": "contracts/ExchangeStorage.sol:23"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "contracts/ExchangeStorage.sol:26"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:28"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:30"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:33"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)1569",
            "src": "contracts/ExchangeStorage.sol:36"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:38"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:40"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:31"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Initializable.sol:66"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Context.sol:41"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/utils/Ownable.sol:22"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/utils/Ownable.sol:82"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)4478_storage)",
            "src": "contracts/OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:16"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/ExchangeWithOrionPool.sol:17"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "WETH",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:19"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "atomicSwaps",
            "type": "t_mapping(t_bytes32,t_struct(LockInfo)5334_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:10"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "secrets",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/ExchangeWithAtomic.sol:11"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(LockInfo)5334_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.LockInfo)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(LockInfo)5334_storage": {
            "label": "struct LibAtomic.LockInfo",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "expiration",
                "type": "t_uint64"
              },
              {
                "label": "used",
                "type": "t_bool"
              },
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "targetChainId",
                "type": "t_uint24"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(Stake)4478_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)4478_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)4471"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_enum(StakePhase)4471": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)8803_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)8803_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)8803_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)1569": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "598ebdfe2b7d6b226e9c95cb98ab3babe09fc51c59f04cc9cdbc2e0310238790": {
      "address": "0x2e341CcF8E79e3A098D5468525A98F610f829914",
      "txHash": "0xf54e680e975d797b6c7eb8e6e7bb70b28f3c5ef502158a454b6baa87950f9b4e",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "contracts/ExchangeStorage.sol:17"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "contracts/ExchangeStorage.sol:21"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)8803_storage)dyn_storage)",
            "src": "contracts/ExchangeStorage.sol:23"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "contracts/ExchangeStorage.sol:26"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:28"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:30"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:33"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)1569",
            "src": "contracts/ExchangeStorage.sol:36"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:38"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:40"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:31"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Initializable.sol:66"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Context.sol:41"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/utils/Ownable.sol:22"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/utils/Ownable.sol:82"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)4478_storage)",
            "src": "contracts/OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:16"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/ExchangeWithOrionPool.sol:17"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "WETH",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:19"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "atomicSwaps",
            "type": "t_mapping(t_bytes32,t_struct(LockInfo)5334_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:10"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "secrets",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/ExchangeWithAtomic.sol:11"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(LockInfo)5334_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.LockInfo)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(LockInfo)5334_storage": {
            "label": "struct LibAtomic.LockInfo",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "expiration",
                "type": "t_uint64"
              },
              {
                "label": "used",
                "type": "t_bool"
              },
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "targetChainId",
                "type": "t_uint24"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(Stake)4478_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)4478_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)4471"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_enum(StakePhase)4471": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)8803_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)8803_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)8803_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)1569": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "7a39c626cbb459502922d31829f7c1eb58e712f5f6588175c968859420c44ee4": {
      "address": "0x2595BCBd49D3Cb1A69BfA1777999d49F554cFBCe",
      "txHash": "0xa6af0b9bba78c0d112c3a10db1e6a54979414cb71d5f5699e9344abe12f35bfa",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "contracts/ExchangeStorage.sol:17"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "contracts/ExchangeStorage.sol:21"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)8699_storage)dyn_storage)",
            "src": "contracts/ExchangeStorage.sol:23"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "contracts/ExchangeStorage.sol:26"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:28"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:30"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:33"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)4915",
            "src": "contracts/ExchangeStorage.sol:36"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:38"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:40"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:22"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:27"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Initializable.sol:62"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Context.sol:40"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/utils/Ownable.sol:20"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/utils/Ownable.sol:80"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)4149_storage)",
            "src": "contracts/OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:16"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/ExchangeWithOrionPool.sol:17"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "WETH",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:19"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "atomicSwaps",
            "type": "t_mapping(t_bytes32,t_struct(LockInfo)5116_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:11"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "secrets",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/ExchangeWithAtomic.sol:12"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(LockInfo)5116_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.LockInfo)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(LockInfo)5116_storage": {
            "label": "struct LibAtomic.LockInfo",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "expiration",
                "type": "t_uint64"
              },
              {
                "label": "used",
                "type": "t_bool"
              },
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "targetChainId",
                "type": "t_uint24"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(Stake)4149_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)4149_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)4142"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_enum(StakePhase)4142": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)8699_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)8699_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)8699_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)4915": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "4a3d4f16fe0a29b40abd7f9fe732041d6411a29f26f38309aee8a21deb5fa79b": {
      "address": "0x34233E37717451562EDD72dC7EdC4D0A7128C010",
      "txHash": "0x6020e6d0d937fd7a143943cc1d66611fc64d24189ee2fa984c379abc5cf8ebc3",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "contracts/ExchangeStorage.sol:17"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "contracts/ExchangeStorage.sol:21"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)8711_storage)dyn_storage)",
            "src": "contracts/ExchangeStorage.sol:23"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "contracts/ExchangeStorage.sol:26"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:28"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:30"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:33"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)4915",
            "src": "contracts/ExchangeStorage.sol:36"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:38"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:40"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:22"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:27"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Initializable.sol:62"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Context.sol:40"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/utils/Ownable.sol:20"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/utils/Ownable.sol:80"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)4149_storage)",
            "src": "contracts/OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:16"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/ExchangeWithOrionPool.sol:17"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "WETH",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:19"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "atomicSwaps",
            "type": "t_mapping(t_bytes32,t_struct(LockInfo)5123_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:11"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "secrets",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/ExchangeWithAtomic.sol:12"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(LockInfo)5123_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.LockInfo)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(LockInfo)5123_storage": {
            "label": "struct LibAtomic.LockInfo",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "expiration",
                "type": "t_uint64"
              },
              {
                "label": "used",
                "type": "t_bool"
              },
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "targetChainId",
                "type": "t_uint24"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(Stake)4149_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)4149_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)4142"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_enum(StakePhase)4142": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)8711_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)8711_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)8711_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)4915": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "a43a86c1e24fb166e4bcbc30c086e5e1c85a2accc6d7547e5d9f74970892806b": {
      "address": "0x27dFFe5439Ffe62fD0A86f0D91074CF934457f95",
      "txHash": "0x68d18d20c2fe7872c0ea698f132d2dfbb3f74388a054da321fa66bd3ae949ba9",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "contracts/ExchangeStorage.sol:17"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "contracts/ExchangeStorage.sol:21"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)8591_storage)dyn_storage)",
            "src": "contracts/ExchangeStorage.sol:23"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "contracts/ExchangeStorage.sol:26"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:28"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:30"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:33"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)4795",
            "src": "contracts/ExchangeStorage.sol:36"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:38"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:40"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:22"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:27"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Initializable.sol:62"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Context.sol:40"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/utils/Ownable.sol:20"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/utils/Ownable.sol:80"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)4029_storage)",
            "src": "contracts/OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:16"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/ExchangeWithOrionPool.sol:17"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "WETH",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:19"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "atomicSwaps",
            "type": "t_mapping(t_bytes32,t_struct(LockInfo)5003_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:11"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "secrets",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/ExchangeWithAtomic.sol:12"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(LockInfo)5003_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.LockInfo)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(LockInfo)5003_storage": {
            "label": "struct LibAtomic.LockInfo",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "expiration",
                "type": "t_uint64"
              },
              {
                "label": "used",
                "type": "t_bool"
              },
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "targetChainId",
                "type": "t_uint24"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(Stake)4029_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)4029_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)4022"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_enum(StakePhase)4022": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)8591_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)8591_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)8591_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)4795": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "a697fa95d9842b44e46c43067b36fbfc9334ca490111abb0c9af64c593471c04": {
      "address": "0x7D3e2F5CD079F2392aa7b05c289D07E074B9d1c0",
      "txHash": "0xfcf6c9c6b15375064c7f15aaf332401f89f220a86fc8090e9a30e62c1a47850b",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "contracts/ExchangeStorage.sol:17"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "contracts/ExchangeStorage.sol:21"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)8599_storage)dyn_storage)",
            "src": "contracts/ExchangeStorage.sol:23"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "contracts/ExchangeStorage.sol:26"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:28"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:30"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:33"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)4803",
            "src": "contracts/ExchangeStorage.sol:36"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:38"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:40"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:22"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:27"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Initializable.sol:62"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Context.sol:40"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/utils/Ownable.sol:20"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/utils/Ownable.sol:80"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)4037_storage)",
            "src": "contracts/OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:16"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/ExchangeWithOrionPool.sol:17"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "WETH",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:19"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "atomicSwaps",
            "type": "t_mapping(t_bytes32,t_struct(LockInfo)5011_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:11"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "secrets",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/ExchangeWithAtomic.sol:12"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(LockInfo)5011_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.LockInfo)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(LockInfo)5011_storage": {
            "label": "struct LibAtomic.LockInfo",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "expiration",
                "type": "t_uint64"
              },
              {
                "label": "used",
                "type": "t_bool"
              },
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "targetChainId",
                "type": "t_uint24"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(Stake)4037_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)4037_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)4030"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_enum(StakePhase)4030": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)8599_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)8599_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)8599_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)4803": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "8844dc32306f96aa18e6a018faedd3c1c9062192b7577cd8130de3b46d40174a": {
      "address": "0xc71DbCDA0F3aF7e78Cb131cEDb0b7e4bFF5ebBcB",
      "txHash": "0x7d0d15747006441f7bec2ec782af075d310e36d2019eb35df1ace377a38bfb92",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "contracts/ExchangeStorage.sol:17"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "contracts/ExchangeStorage.sol:21"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)8589_storage)dyn_storage)",
            "src": "contracts/ExchangeStorage.sol:23"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "contracts/ExchangeStorage.sol:26"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:28"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:30"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:33"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)4793",
            "src": "contracts/ExchangeStorage.sol:36"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:38"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:40"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:22"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:27"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Initializable.sol:62"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Context.sol:40"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/utils/Ownable.sol:20"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/utils/Ownable.sol:80"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)4027_storage)",
            "src": "contracts/OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:16"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/ExchangeWithOrionPool.sol:17"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "WETH",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:19"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "atomicSwaps",
            "type": "t_mapping(t_bytes32,t_struct(LockInfo)5001_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:11"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "secrets",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/ExchangeWithAtomic.sol:12"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(LockInfo)5001_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.LockInfo)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(LockInfo)5001_storage": {
            "label": "struct LibAtomic.LockInfo",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "expiration",
                "type": "t_uint64"
              },
              {
                "label": "used",
                "type": "t_bool"
              },
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "targetChainId",
                "type": "t_uint24"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(Stake)4027_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)4027_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)4020"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_enum(StakePhase)4020": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)8589_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)8589_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)8589_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)4793": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "18615d57a7daa1d0c248d98cfd4ac225469dc9845804aff2faa25f9250ad9873": {
      "address": "0xBF0abF74012fD56255A1E8e25916869A3810F87b",
      "txHash": "0x5e7a85d9523f30a864ef1ddaea581e6448f2bea3fa3d4575401b8f18147a173e",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "contracts/ExchangeStorage.sol:17"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "contracts/ExchangeStorage.sol:21"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)5385_storage)dyn_storage)",
            "src": "contracts/ExchangeStorage.sol:23"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "contracts/ExchangeStorage.sol:26"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:28"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:30"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:33"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)1801",
            "src": "contracts/ExchangeStorage.sol:36"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:38"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:40"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:22"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:27"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Initializable.sol:62"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Context.sol:40"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/utils/Ownable.sol:20"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/utils/Ownable.sol:80"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)1576_storage)",
            "src": "contracts/OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:16"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/ExchangeWithOrionPool.sol:17"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "WETH",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:19"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "atomicSwaps",
            "type": "t_mapping(t_bytes32,t_struct(LockInfo)1987_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:11"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "secrets",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/ExchangeWithAtomic.sol:12"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(LockInfo)1987_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.LockInfo)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(LockInfo)1987_storage": {
            "label": "struct LibAtomic.LockInfo",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "expiration",
                "type": "t_uint64"
              },
              {
                "label": "used",
                "type": "t_bool"
              },
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "targetChainId",
                "type": "t_uint24"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(Stake)1576_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)1576_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)1569"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_enum(StakePhase)1569": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)5385_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)5385_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)5385_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)1801": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "f33d69a6f50cbc1706a4195fee8b15e122c250aecd77928fba00e829e3c9e8a8": {
      "address": "0x7b92081F52cAb4CD520e0d41eb31f314757fA0Aa",
      "txHash": "0x2d504c1ed8ccd3bf3640f1dd2cc5826b519a68be7c78518fb5b0080b58eecf06",
      "layout": {
        "storage": [
          {
            "contract": "ExchangeStorage",
            "label": "filledAmounts",
            "type": "t_mapping(t_bytes32,t_uint192)",
            "src": "contracts/ExchangeStorage.sol:17"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetBalances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int192))",
            "src": "contracts/ExchangeStorage.sol:21"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liabilities",
            "type": "t_mapping(t_address,t_array(t_struct(Liability)5374_storage)dyn_storage)",
            "src": "contracts/ExchangeStorage.sol:23"
          },
          {
            "contract": "ExchangeStorage",
            "label": "collateralAssets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ExchangeStorage.sol:25"
          },
          {
            "contract": "ExchangeStorage",
            "label": "assetRisks",
            "type": "t_mapping(t_address,t_uint8)",
            "src": "contracts/ExchangeStorage.sol:26"
          },
          {
            "contract": "ExchangeStorage",
            "label": "stakeRisk",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:28"
          },
          {
            "contract": "ExchangeStorage",
            "label": "liquidationPremium",
            "type": "t_uint8",
            "src": "contracts/ExchangeStorage.sol:30"
          },
          {
            "contract": "ExchangeStorage",
            "label": "priceOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:32"
          },
          {
            "contract": "ExchangeStorage",
            "label": "positionOverdue",
            "type": "t_uint64",
            "src": "contracts/ExchangeStorage.sol:33"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_orionToken",
            "type": "t_contract(IERC20)1790",
            "src": "contracts/ExchangeStorage.sol:36"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_oracleAddress",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:38"
          },
          {
            "contract": "ExchangeStorage",
            "label": "_allowedMatcher",
            "type": "t_address",
            "src": "contracts/ExchangeStorage.sol:40"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:22"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/utils/Initializable.sol:27"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Initializable.sol:62"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/Context.sol:40"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/utils/Ownable.sol:20"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/utils/Ownable.sol:80"
          },
          {
            "contract": "OrionVault",
            "label": "stakingData",
            "type": "t_mapping(t_address,t_struct(Stake)1565_storage)",
            "src": "contracts/OrionVault.sol:19"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "_orionpoolRouter",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:16"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "orionpoolAllowances",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/ExchangeWithOrionPool.sol:17"
          },
          {
            "contract": "ExchangeWithOrionPool",
            "label": "WETH",
            "type": "t_address",
            "src": "contracts/ExchangeWithOrionPool.sol:19"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "atomicSwaps",
            "type": "t_mapping(t_bytes32,t_struct(LockInfo)1976_storage)",
            "src": "contracts/ExchangeWithAtomic.sol:11"
          },
          {
            "contract": "ExchangeWithAtomic",
            "label": "secrets",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/ExchangeWithAtomic.sol:12"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(LockInfo)1976_storage)": {
            "label": "mapping(bytes32 => struct LibAtomic.LockInfo)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(LockInfo)1976_storage": {
            "label": "struct LibAtomic.LockInfo",
            "members": [
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "expiration",
                "type": "t_uint64"
              },
              {
                "label": "used",
                "type": "t_bool"
              },
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "targetChainId",
                "type": "t_uint24"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(Stake)1565_storage)": {
            "label": "mapping(address => struct OrionVault.Stake)"
          },
          "t_struct(Stake)1565_storage": {
            "label": "struct OrionVault.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint64"
              },
              {
                "label": "phase",
                "type": "t_enum(StakePhase)1558"
              },
              {
                "label": "lastActionTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_enum(StakePhase)1558": {
            "label": "enum OrionVault.StakePhase",
            "members": [
              "NOTSTAKED",
              "LOCKED",
              "RELEASING",
              "READYTORELEASE",
              "FROZEN"
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_uint192)": {
            "label": "mapping(bytes32 => uint192)"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_mapping(t_address,t_int192))": {
            "label": "mapping(address => mapping(address => int192))"
          },
          "t_mapping(t_address,t_int192)": {
            "label": "mapping(address => int192)"
          },
          "t_int192": {
            "label": "int192"
          },
          "t_mapping(t_address,t_array(t_struct(Liability)5374_storage)dyn_storage)": {
            "label": "mapping(address => struct MarginalFunctionality.Liability[])"
          },
          "t_array(t_struct(Liability)5374_storage)dyn_storage": {
            "label": "struct MarginalFunctionality.Liability[]"
          },
          "t_struct(Liability)5374_storage": {
            "label": "struct MarginalFunctionality.Liability",
            "members": [
              {
                "label": "asset",
                "type": "t_address"
              },
              {
                "label": "timestamp",
                "type": "t_uint64"
              },
              {
                "label": "outstandingAmount",
                "type": "t_uint192"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint8)": {
            "label": "mapping(address => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)1790": {
            "label": "contract IERC20"
          }
        }
      }
    }
  }
}
